generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  username           String        @unique
  email              String        @unique
  password           String
  role               Role          @default(USER)
  restaurants        Restaurant[] 
  highlightsApproved Highlight[]   @relation("HighlightApprovedBy")
  heroesApproved     Hero[]        @relation("HeroApprovedBy")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum Role {
  USER
  ADMIN
  RESTAURANT_OWNER
}

model Restaurant {
  id            Int               @id @default(autoincrement())
  name          String
  location      String
  description   String?           @db.Text
  imageUrl      String?
  mediaType     String?
  districtId    Int?
  userId        Int
  status        String            @default("PENDING")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  district      District?         @relation(fields: [districtId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  environment   Environment[]
  signatureDish SignatureDish[]
  highlight     Highlight[]
  tags          RestaurantTag[]
  menus         Menu[]
  hero          Hero[]
}

model Highlight {
  id            Int         @id @default(autoincrement())
  restaurantId  Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  approvedBy    Int?
  approvedAt    DateTime?
  admin         User?       @relation("HighlightApprovedBy", fields: [approvedBy], references: [id])
}

model Hero {
  id            Int         @id @default(autoincrement())
  restaurantId  Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  approvedBy    Int?
  approvedAt    DateTime? 
  admin         User?       @relation("HeroApprovedBy", fields: [approvedBy], references: [id], onDelete: Cascade)
  imageUrl      String?     // Зурагны URL хадгалах талбар
}


enum Status {
  PENDING
  APPROVED
  REJECTED
}
model District {
  id          Int          @id @default(autoincrement())
  name        String
  description String?      @db.Text
  restaurants Restaurant[]
}

model Environment {
  id            Int         @id @default(autoincrement())
  imageUrl      String      
  mediaType     String?     
  description   String?     @db.Text
  restaurantId  Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
}

model Menu {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?      @db.Text
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  restaurantId  Int
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [id])
  menuItems     MenuItem[]
}

model MenuItem {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?     @db.Text
  price         Float
  imageUrl      String?
  mediaType     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  menuId        Int
  menu          Menu        @relation(fields: [menuId], references: [id])
}

model SignatureDish {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?     @db.Text
  imageUrl      String?
  mediaType     String?
  restaurantId  Int
  restaurant    Restaurant  @relation(fields: [restaurantId], references: [id])
}

model Tag {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?         @db.Text
  restaurants   RestaurantTag[]
}

model RestaurantTag {
  restaurantId  Int
  tagId         Int
  restaurant    Restaurant      @relation(fields: [restaurantId], references: [id])
  tag           Tag             @relation(fields: [tagId], references: [id])

  @@id([restaurantId, tagId])
}